{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport Route from \"../components/models/Route\"; // step 3 for redux - create slices for each components \n\nconst RouteSlice = createSlice({\n  name: 'route',\n  initialState: {\n    RouteState: new Route(),\n    RouteList: []\n  },\n  reducers: {\n    getRouteById: (state, action) => {\n      console.log('route slice reducer');\n      state.RouteState = action.payload;\n    },\n    getAllRoute: (state, action) => {\n      console.log('RouteSlice reducers getAllRoute');\n      state.RouteList = action.payload;\n    },\n    deleteRouteById: (state, action) => {\n      console.log('RouteSlice reducers deleteRouteById');\n      state.RouteList = action.payload;\n    },\n    updateRoute: (state, action) => {\n      console.log('RouteSlice reducers update RouteById');\n      state.RouteList = action.payload;\n    },\n    insertRoute: (state, action) => {\n      console.log('RouteSlice reducers addRouteById');\n      state.RouteList = action.payload;\n    } // more methods will be added \n\n  }\n});\nexport const {\n  getRouteById,\n  getAllRoute,\n  deleteRouteById,\n  updateRoute,\n  insertRoute\n} = RouteSlice.actions;\nexport default RouteSlice.reducer;","map":{"version":3,"sources":["C:/CapGWorkspace/bus-reservation-ui/src/redux/RouteSlice.js"],"names":["createSlice","Route","RouteSlice","name","initialState","RouteState","RouteList","reducers","getRouteById","state","action","console","log","payload","getAllRoute","deleteRouteById","updateRoute","insertRoute","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,4BAAlB,C,CAEA;;AACA,MAAMC,UAAU,GAAGF,WAAW,CAAC;AAE3BG,EAAAA,IAAI,EAAE,OAFqB;AAI3BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,UAAU,EAAE,IAAIJ,KAAJ,EADF;AAEVK,IAAAA,SAAS,EAAE;AAFD,GAJa;AAS3BC,EAAAA,QAAQ,EAAE;AAENC,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAH,MAAAA,KAAK,CAACJ,UAAN,GAAmBK,MAAM,CAACG,OAA1B;AACH,KALK;AAONC,IAAAA,WAAW,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAH,MAAAA,KAAK,CAACH,SAAN,GAAkBI,MAAM,CAACG,OAAzB;AACH,KAVK;AAWNE,IAAAA,eAAe,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACAH,MAAAA,KAAK,CAACH,SAAN,GAAkBI,MAAM,CAACG,OAAzB;AACH,KAdK;AAeNG,IAAAA,WAAW,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAH,MAAAA,KAAK,CAACH,SAAN,GAAkBI,MAAM,CAACG,OAAzB;AACH,KAlBK;AAmBNI,IAAAA,WAAW,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACAH,MAAAA,KAAK,CAACH,SAAN,GAAkBI,MAAM,CAACG,OAAzB;AACH,KAtBK,CAwBN;;AAxBM;AATiB,CAAD,CAA9B;AAqCA,OAAO,MAAM;AAAEL,EAAAA,YAAF;AAAgBM,EAAAA,WAAhB;AAA6BC,EAAAA,eAA7B;AAA8CC,EAAAA,WAA9C;AAA2DC,EAAAA;AAA3D,IAA2Ef,UAAU,CAACgB,OAA5F;AAEP,eAAehB,UAAU,CAACiB,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport Route from \"../components/models/Route\";\r\n\r\n// step 3 for redux - create slices for each components \r\nconst RouteSlice = createSlice({\r\n\r\n    name: 'route',\r\n\r\n    initialState: {\r\n        RouteState: new Route(),\r\n        RouteList: []\r\n    },\r\n\r\n    reducers: {\r\n\r\n        getRouteById: (state, action) => {\r\n            console.log('route slice reducer');\r\n            state.RouteState = action.payload;\r\n        },\r\n\r\n        getAllRoute: (state, action) => {\r\n            console.log('RouteSlice reducers getAllRoute');\r\n            state.RouteList = action.payload;\r\n        },\r\n        deleteRouteById: (state, action) => {\r\n            console.log('RouteSlice reducers deleteRouteById');\r\n            state.RouteList = action.payload;\r\n        },\r\n        updateRoute: (state, action) => {\r\n            console.log('RouteSlice reducers update RouteById');\r\n            state.RouteList = action.payload;\r\n        },\r\n        insertRoute: (state, action) => {\r\n            console.log('RouteSlice reducers addRouteById');\r\n            state.RouteList = action.payload;\r\n        },\r\n\r\n        // more methods will be added \r\n    }\r\n});\r\n\r\nexport const { getRouteById, getAllRoute, deleteRouteById, updateRoute, insertRoute } = RouteSlice.actions;\r\n\r\nexport default RouteSlice.reducer;"]},"metadata":{},"sourceType":"module"}